Reading point coordinates...
[' data', 'ZoneType', 'GridCoordinates', 'Elem_Triangles', 'Elem_Quads', 'PointData', 'ZoneIterativeData_t']
Reading point indices...
Done! Elapsed time =  0.003015756607055664 s
Reading gradient of adaptation field...
Done! Elapsed time =  0.0017786026000976562 s
Reading gradient of adaptation field...
Done! Elapsed time =  0.0017087459564208984 s
Compute cell volumes/areas of all of the cells...
Computing Cells volumes...
N of trias:  1806
N of quads:  24229
Done! Elapsed time  0.01165318489074707 s
Extracting Neighbors points...
Analyzing  25557  points...
Arrays created.. Now we store neighbors and cells CellsOfPoint structure
Cells analyzed:  0
Cells analyzed:  10000
Cells analyzed:  20000
Elapsed time  0.10398602485656738 s
Computing if a point is inside the prescribed bounding box...
Done!  21382  found inside the box,  4175  found outside. Elapsed time =  0.003939151763916016  s
Computing initial metric...
Done! Elapsed time  0.0349578857421875 s
np.mean(avg_S) =  0.018471509101207723
np.std(avg_S) =  0.06390763810033114
Computing Cells volumes...
Done! Elapsed time =  0.001093149185180664  s
Current complexity of region to adapt =  20481.829109078106
Total number of points to coarse =  0 , Total number of points to refine =  3521
Smoothing the metric distribution...
Done! Elapsed time  0.003709554672241211 s
Final AdaptedComplexity =  171954.30769027516
A complexity ratio of 2.0 has been requested
Current complexity ratio =  8.39545661544751
Modify metric to enforce desired complexity ratio
Reached an error = 0.0002667207144558814 after 4 iteration
Final complexity ratio = 1.9994665585710882
N of points hitting max spacing =  0   N of points hitting min spacing =  307
Total elapsed time =  0.39343690872192383 s
