Reading point coordinates...
[' data', 'ZoneType', 'GridCoordinates', 'Elem_Triangles', 'Elem_Quads', 'PointData', 'ZoneIterativeData_t']
Reading point indices...
Done! Elapsed time =  0.0024564266204833984 s
Reading gradient of adaptation field...
Done! Elapsed time =  0.001116037368774414 s
Reading gradient of adaptation field...
Done! Elapsed time =  0.0012259483337402344 s
Reading wall distance field...
Done! Elapsed time =  0.0004286766052246094 s
Compute cell volumes/areas of all of the cells...
Computing Cells volumes...
N of trias:  9564
N of quads:  17264
Done! Elapsed time  0.006635427474975586 s
Extracting Neighbors points...
Analyzing  22232  points...
Arrays created.. Now we store neighbors and cells CellsOfPoint structure
Cells analyzed:  0
Cells analyzed:  10000
Cells analyzed:  20000
Elapsed time  0.05497407913208008 s
Computing if a point is inside the prescribed bounding box...
Done!  21732  found inside the box,  500  found outside. Elapsed time =  0.0026755332946777344  s
Checking which points are farther from the wall than the minimum distance set...
Done!  4656  found outside the BL and inside the box,  17576  found inside the BL. Elapsed time =  0.005351066589355469  s
Computing initial metric...
Done! Elapsed time  0.01637578010559082 s
np.mean(avg_S) =  0.009604578352933131
np.std(avg_S) =  0.0252453595678839
Computing Cells volumes...
Done! Elapsed time =  0.0008063316345214844  s
Current complexity of region to adapt =  2228.752577294004
Total number of points to coarse =  0 , Total number of points to refine =  756
Smoothing the metric distribution...
Done! Elapsed time  0.0027899742126464844 s
Final AdaptedComplexity =  11129.65221159671
A complexity ratio of 2.0 has been requested
Current complexity ratio =  4.993668801545283
Modify metric to enforce desired complexity ratio
Reached an error = 0.0 after 2 iteration
Final complexity ratio = 2.0
N of points hitting max spacing =  0   N of points hitting min spacing =  0
Total elapsed time =  0.19368433952331543 s
