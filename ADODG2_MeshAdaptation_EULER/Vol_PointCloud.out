Reading point coordinates...
[' data', 'ZoneType', 'GridCoordinates', 'Elem_Triangles', 'PointData', 'ZoneIterativeData_t']
Reading point indices...
Done! Elapsed time =  0.0011055469512939453 s
Reading gradient of adaptation field...
Done! Elapsed time =  0.0006642341613769531 s
Reading gradient of adaptation field...
Done! Elapsed time =  0.0007395744323730469 s
Compute cell volumes/areas of all of the cells...
Computing Cells volumes...
N of trias:  10110
N of quads:  0
Done! Elapsed time  0.0024785995483398438 s
Extracting Neighbors points...
Analyzing  5241  points...
Arrays created.. Now we store neighbors and cells CellsOfPoint structure
Cells analyzed:  0
Cells analyzed:  10000
Elapsed time  0.016138792037963867 s
Computing if a point is inside the prescribed bounding box...
Done!  3444  found inside the box,  1797  found outside. Elapsed time =  0.0005652904510498047  s
Computing initial metric...
Done! Elapsed time  0.00797271728515625 s
np.mean(avg_S) =  0.010049665392849657
np.std(avg_S) =  0.0284846192346464
Computing Cells volumes...
Done! Elapsed time =  0.00020074844360351562  s
Current complexity of region to adapt =  1480.0328832909474
Total number of points to coarse =  0 , Total number of points to refine =  656
Smoothing the metric distribution...
Done! Elapsed time  0.000652313232421875 s
Final AdaptedComplexity =  11564.78105533728
A complexity ratio of 2.0 has been requested
Current complexity ratio =  7.8138676416582395
Modify metric to enforce desired complexity ratio
Reached an error = 0.00043306313839985844 after 4 iteration
Final complexity ratio = 1.9991338737232003
N of points hitting max spacing =  0   N of points hitting min spacing =  40
Total elapsed time =  0.05695319175720215 s
